package com.mycompany.ferramentadebackup.view;

import com.mycompany.ferramentadebackup.dao.BancoDeDadosDAO;
import com.mycompany.ferramentadebackup.dto.BancoDeDadosDTO;
import com.mycompany.ferramentadebackup.compactadorzip.CompactadorZip;
import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.util.Optional;

/**
 *
 * @author Giuliano Vianna
 */
public class FerramentaDeBackupView extends javax.swing.JFrame {

    /**
     * Creates new form frmFerramentaDeBackupView
     */
    public FerramentaDeBackupView() {
        initComponents();

        verificarBancoDeDados();

        iconeJanela();

        popularTabelaAgendamentoBackup();

        // Centraliza a janela
        this.setLocationRelativeTo(null);

        formatarJSpinner();

        new Timer(delay, taskPerformer).start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        txtArquivoDiretorio = new javax.swing.JTextField();
        btnSelecionarArquivoDiretorio = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtDiretorio = new javax.swing.JTextField();
        btnSelecionarDiretorioDestino = new javax.swing.JButton();
        jdData = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTabela = new javax.swing.JTable();
        rdbPC = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        btnNovo = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnAtualizar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtNomeBackup = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jsHora = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ferramenta de Backup");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Arquivo ou Diretório");

        txtArquivoDiretorio.setEditable(false);
        txtArquivoDiretorio.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtArquivoDiretorio.setEnabled(false);

        btnSelecionarArquivoDiretorio.setBackground(new java.awt.Color(153, 0, 255));
        btnSelecionarArquivoDiretorio.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSelecionarArquivoDiretorio.setForeground(new java.awt.Color(255, 255, 255));
        btnSelecionarArquivoDiretorio.setText("Selecionar");
        btnSelecionarArquivoDiretorio.setEnabled(false);
        btnSelecionarArquivoDiretorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionarArquivoDiretorioActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Diretório de Destino");

        txtDiretorio.setEditable(false);
        txtDiretorio.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtDiretorio.setEnabled(false);

        btnSelecionarDiretorioDestino.setBackground(new java.awt.Color(153, 0, 255));
        btnSelecionarDiretorioDestino.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSelecionarDiretorioDestino.setForeground(new java.awt.Color(255, 255, 255));
        btnSelecionarDiretorioDestino.setText("Selecionar");
        btnSelecionarDiretorioDestino.setEnabled(false);
        btnSelecionarDiretorioDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionarDiretorioDestinoActionPerformed(evt);
            }
        });

        jdData.setDateFormatString("dd'/'MM'/'yy");
        jdData.setEnabled(false);
        jdData.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Data");

        jtTabela.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        jtTabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome Backup", "Arquivo/Diretório de Origem", "Diretório de Destino", "Data", "Hora", "Desligar PC"
            }
        ));
        jtTabela.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jtTabela.setShowGrid(false);
        jtTabela.setShowVerticalLines(true);
        jScrollPane1.setViewportView(jtTabela);
        if (jtTabela.getColumnModel().getColumnCount() > 0) {
            jtTabela.getColumnModel().getColumn(0).setMinWidth(80);
            jtTabela.getColumnModel().getColumn(0).setPreferredWidth(80);
            jtTabela.getColumnModel().getColumn(0).setMaxWidth(80);
            jtTabela.getColumnModel().getColumn(1).setMinWidth(200);
            jtTabela.getColumnModel().getColumn(2).setMinWidth(420);
            jtTabela.getColumnModel().getColumn(2).setPreferredWidth(420);
            jtTabela.getColumnModel().getColumn(2).setMaxWidth(420);
            jtTabela.getColumnModel().getColumn(3).setMinWidth(420);
            jtTabela.getColumnModel().getColumn(3).setPreferredWidth(420);
            jtTabela.getColumnModel().getColumn(3).setMaxWidth(420);
            jtTabela.getColumnModel().getColumn(4).setMinWidth(80);
            jtTabela.getColumnModel().getColumn(4).setPreferredWidth(80);
            jtTabela.getColumnModel().getColumn(4).setMaxWidth(80);
            jtTabela.getColumnModel().getColumn(5).setMinWidth(80);
            jtTabela.getColumnModel().getColumn(5).setPreferredWidth(80);
            jtTabela.getColumnModel().getColumn(5).setMaxWidth(80);
            jtTabela.getColumnModel().getColumn(6).setMinWidth(80);
            jtTabela.getColumnModel().getColumn(6).setPreferredWidth(80);
            jtTabela.getColumnModel().getColumn(6).setMaxWidth(80);
        }

        rdbPC.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rdbPC.setForeground(new java.awt.Color(153, 0, 255));
        rdbPC.setText("Desligar o PC ao finalizar o backup");
        rdbPC.setEnabled(false);

        btnNovo.setBackground(new java.awt.Color(153, 0, 255));
        btnNovo.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnNovo.setForeground(new java.awt.Color(255, 255, 255));
        btnNovo.setText("Novo");
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });

        btnSalvar.setBackground(new java.awt.Color(153, 0, 255));
        btnSalvar.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnSalvar.setForeground(new java.awt.Color(255, 255, 255));
        btnSalvar.setText("Salvar");
        btnSalvar.setEnabled(false);
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnCancelar.setBackground(new java.awt.Color(153, 0, 255));
        btnCancelar.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setText("Cancelar");
        btnCancelar.setEnabled(false);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnEditar.setBackground(new java.awt.Color(153, 0, 255));
        btnEditar.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnEditar.setForeground(new java.awt.Color(255, 255, 255));
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnExcluir.setBackground(new java.awt.Color(153, 0, 255));
        btnExcluir.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnExcluir.setForeground(new java.awt.Color(255, 255, 255));
        btnExcluir.setText("Excluir");
        btnExcluir.setEnabled(false);
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnAtualizar.setBackground(new java.awt.Color(153, 0, 255));
        btnAtualizar.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnAtualizar.setForeground(new java.awt.Color(255, 255, 255));
        btnAtualizar.setText("Atualizar");
        btnAtualizar.setEnabled(false);
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(btnNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("ID");

        txtID.setEditable(false);
        txtID.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtID.setForeground(new java.awt.Color(255, 255, 255));
        txtID.setEnabled(false);

        txtNomeBackup.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtNomeBackup.setEnabled(false);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Horas");

        jsHora.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jsHora.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.HOUR_OF_DAY)
        );
        jsHora.setToolTipText("");
        jsHora.setEnabled(false);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Nome do Backup");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1374, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(txtArquivoDiretorio, javax.swing.GroupLayout.PREFERRED_SIZE, 729, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnSelecionarArquivoDiretorio, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(txtDiretorio, javax.swing.GroupLayout.PREFERRED_SIZE, 729, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnSelecionarDiretorioDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jdData, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(67, 67, 67)))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jsHora, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtNomeBackup, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(rdbPC, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtArquivoDiretorio, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelecionarArquivoDiretorio))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDiretorio, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelecionarDiretorioDestino))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jsHora, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtNomeBackup, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(rdbPC))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jdData, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelecionarArquivoDiretorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarArquivoDiretorioActionPerformed

        selecionarDiretorioOuArquivo();
    }//GEN-LAST:event_btnSelecionarArquivoDiretorioActionPerformed

    private void btnSelecionarDiretorioDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarDiretorioDestinoActionPerformed

        selecionarDiretorio();
    }//GEN-LAST:event_btnSelecionarDiretorioDestinoActionPerformed

    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed

        configurarBotoes(true, true, false, false, true, false, false, true);
        habilitarCampos(true, true, true, true, true, true);
    }//GEN-LAST:event_btnNovoActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        configurarBotoes(false, false, true, false, false, true, false, false);
        habilitarCampos(false, false, false, false, false, false);
        limparCampos();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed

        salvarAgendamentoBackup();
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed

        editarAgendamentoBackup();
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed

        atualizarAgendamentoBuckup();
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed

        excluirAgendamentoBackup();
    }//GEN-LAST:event_btnExcluirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FerramentaDeBackupView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FerramentaDeBackupView().setVisible(true);
            }

        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnNovo;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnSelecionarArquivoDiretorio;
    private javax.swing.JButton btnSelecionarDiretorioDestino;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser jdData;
    private javax.swing.JSpinner jsHora;
    private javax.swing.JTable jtTabela;
    private javax.swing.JRadioButton rdbPC;
    private javax.swing.JTextField txtArquivoDiretorio;
    private javax.swing.JTextField txtDiretorio;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtNomeBackup;
    // End of variables declaration//GEN-END:variables

    /**
     * Permite ao usuário escolher entre selecionar um diretório ou um arquivo.
     * <p>
     * Este método exibe uma caixa de diálogo com duas opções: "Diretório" e
     * "Arquivo". A escolha do usuário determina se o {@link JFileChooser} será
     * configurado para selecionar apenas diretórios ou apenas arquivos. Após a
     * seleção, o caminho absoluto do diretório ou arquivo escolhido é retornado
     * dentro de um {@link java.util.Optional}.
     * </p>
     *
     * <p>
     * Se o usuário selecionar um item, o caminho absoluto é retornado
     * encapsulado em um {@code Optional<String>}. Se o usuário cancelar a
     * operação ou se ocorrer um erro, um {@code Optional<String>} vazio é
     * retornado.
     * </p>
     *
     * <p>
     * Exceções são tratadas internamente, e uma mensagem de erro é exibida em
     * caso de falha.
     * </p>
     *
     * @return Um {@link java.util.Optional<String>} contendo o caminho do
     * arquivo ou diretório selecionado, ou um {@code Optional} vazio em caso de
     * cancelamento ou erro.
     */
    public Optional<String> selecionarDiretorioOuArquivo() {
        Object[] options = {"Diretório", "Arquivo"};
        int choice = JOptionPane.showOptionDialog(
                null,
                "Você deseja selecionar um diretório ou um arquivo?",
                "Selecionar Diretório ou Arquivo",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]
        );

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(choice == JOptionPane.YES_OPTION
                ? JFileChooser.DIRECTORIES_ONLY : JFileChooser.FILES_ONLY);

        try {
            int option = fileChooser.showOpenDialog(null);
            if (option == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                if (selectedFile != null) {
                    String caminhoArquivoDiretorio = selectedFile.getAbsolutePath();
                    txtArquivoDiretorio.setText(caminhoArquivoDiretorio); // Ajuste conforme sua lógica de interface
                    return Optional.of(caminhoArquivoDiretorio);
                }
            }
        } catch (HeadlessException error) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao selecionar o arquivo ou diretório " + error, "Erro", JOptionPane.ERROR_MESSAGE);
        }

        return Optional.empty();
    }

    /**
     * Abre uma caixa de diálogo para o usuário selecionar um diretório.
     * <p>
     * Este método utiliza o {@link JFileChooser} configurado para permitir que
     * o usuário selecione apenas diretórios. Após a seleção, o caminho absoluto
     * do diretório escolhido é atribuído a uma variável de instância.
     * </p>
     *
     * <p>
     * Se o usuário selecionar um diretório, o caminho absoluto é armazenado na
     * variável {@code txtDiretorio}. Em caso de cancelamento da operação,
     * nenhuma ação é tomada.
     * </p>
     *
     * <p>
     * <b>Nota:</b> Este método não retorna nenhum valor, mas atualiza
     * diretamente a interface do usuário com o caminho do diretório
     * selecionado.
     * </p>
     */
    public void selecionarDiretorio() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); // Configura para selecionar apenas diretórios

        int option = fileChooser.showOpenDialog(null); // Abre a caixa de diálogo centralizada

        if (option == JFileChooser.APPROVE_OPTION) {
            File selectedDirectory = fileChooser.getSelectedFile();

            if (selectedDirectory != null) {
                // Atribui o caminho à variável de instância
                String caminhoDoDiretorio = selectedDirectory.getAbsolutePath();
                txtDiretorio.setText(caminhoDoDiretorio);
            }
        }
    }

    /**
     * Verifica a existência do banco de dados e o cria, se necessário.
     * <p>
     * Este método utiliza a classe {@link BancoDeDadosDAO} para verificar se o
     * banco de dados já existe. Se o banco de dados não existir, ele é criado
     * por meio do método {@link BancoDeDadosDAO#verificarECriarBancoDeDados()}.
     * </p>
     *
     * <p>
     * <b>Nota:</b> Este método não retorna nenhum valor, pois sua função é
     * verificar e criar o banco de dados, se necessário, sem fornecer
     * resultados diretos.
     * </p>
     */
    public final void verificarBancoDeDados() {

        BancoDeDadosDAO objBancoDeDadosDAO = new BancoDeDadosDAO();
        objBancoDeDadosDAO.verificarECriarBancoDeDados();
    }

    /**
     * Define o ícone da janela com base em um arquivo de imagem.
     * <p>
     * Este método carrega uma imagem de ícone da classe {@link ImageIcon} com o
     * caminho especificado. Em seguida, define essa imagem como o ícone da
     * janela atual usando {@link #setIconImage(java.awt.Image)}.
     * </p>
     *
     * <p>
     * <b>Nota:</b> Este método é usado para configurar o ícone da janela e não
     * retorna nenhum valor.
     * </p>
     */
    private void iconeJanela() {

        ImageIcon icone = new ImageIcon(getClass().getClassLoader().getResource("images/iconeJanela.png"));
        setIconImage(icone.getImage());
    }

    /**
     * Configura o estado dos botões da interface com base em parâmetros
     * booleanos.
     * <p>
     * Este método permite configurar o estado de vários botões da interface de
     * acordo com os valores booleanos fornecidos como parâmetros. Cada
     * parâmetro corresponde a um botão e define se ele deve estar habilitado
     * (true) ou desabilitado (false).
     * </p>
     *
     * @param diretorioOrigem Define se os botões de seleção de diretório de
     * origem devem estar habilitados.
     * @param diretorioDestino Define se os botões de seleção de diretório de
     * destino devem estar habilitados.
     * @param novo Define se o botão "Novo" deve estar habilitado.
     * @param atualizar Define se o botão "Atualizar" deve estar habilitado.
     * @param salvar Define se o botão "Salvar" deve estar habilitado.
     * @param editar Define se o botão "Editar" deve estar habilitado.
     * @param excluir Define se o botão "Excluir" deve estar habilitado.
     * @param cancelar Define se o botão "Cancelar" deve estar habilitado.
     */
    public void configurarBotoes(boolean diretorioOrigem, boolean diretorioDestino, boolean novo, boolean atualizar, boolean salvar, boolean editar, boolean excluir, boolean cancelar) {

        btnSelecionarArquivoDiretorio.setEnabled(diretorioOrigem);
        btnSelecionarDiretorioDestino.setEnabled(diretorioOrigem);
        btnNovo.setEnabled(novo);
        btnAtualizar.setEnabled(atualizar);
        btnSalvar.setEnabled(salvar);
        btnEditar.setEnabled(editar);
        btnExcluir.setEnabled(excluir);
        btnCancelar.setEnabled(cancelar);
    }

    /**
     * Habilita ou desabilita campos da interface com base em parâmetros
     * booleanos.
     * <p>
     * Este método permite habilitar ou desabilitar vários campos da interface
     * com base nos valores booleanos fornecidos como parâmetros. Cada parâmetro
     * corresponde a um campo e define se ele deve estar habilitado (true) ou
     * desabilitado (false).
     * </p>
     *
     * @param arquivoDiretorio Define se o campo de arquivo/diretório deve estar
     * habilitado.
     * @param diretorio Define se o campo de diretório deve estar habilitado.
     * @param data Define se o campo de data deve estar habilitado.
     * @param nomeBackup Define se o campo de nome de backup deve estar
     * habilitado.
     * @param desligarPC Define se a opção de desligar o PC deve estar
     * habilitada.
     * @param hora Define se o campo de hora deve estar habilitado.
     */
    private void habilitarCampos(boolean arquivoDiretorio, boolean diretorio, boolean data, boolean nomeBackup, boolean desligarPC, boolean hora) {

        txtArquivoDiretorio.setEnabled(arquivoDiretorio);
        txtDiretorio.setEnabled(diretorio);
        jdData.setEnabled(data);
        txtNomeBackup.setEnabled(nomeBackup);
        rdbPC.setEnabled(desligarPC);
        jsHora.setEnabled(hora);

    }

    /**
    * Salva um agendamento de backup com base nos campos preenchidos na interface.
    * <p>
    * Este método realiza as seguintes ações:
    * 1. Verifica se os campos obrigatórios contendo endereços de diretórios estão preenchidos.
    * 2. Coleta os valores dos campos da interface, como arquivo/diretório, diretório de destino, data, hora,
    *    opção de desligar o PC e nome do backup.
    * 3. Configura um objeto de transferência de dados (DTO) com os valores coletados.
    * 4. Chama o método para salvar os dados no banco de dados usando um objeto de acesso a dados (DAO).
    * 5. Limpa os campos da interface.
    * 6. Desabilita campos e configura os botões na interface de acordo com a lógica.
    * 7. Atualiza a tabela de agendamento de backup na interface.
    * </p>
    */
    public void salvarAgendamentoBackup() {

        //Método verifica se os campos tem os endereços dos diretórios 
        if (verificarCampos()) {

            return;
        }

        String arquivoDiretorio = txtArquivoDiretorio.getText();
        String diretorioDestino = txtDiretorio.getText();

        Date dataSelecionada = jdData.getDate();
        String dataFormatada = formatarData(dataSelecionada);

        JSpinner.DateEditor editor = new JSpinner.DateEditor(jsHora, "HH:mm");
        jsHora.setEditor(editor);
        Date dataHora = (Date) jsHora.getValue();
        String horaFormatada = formatarHora(dataHora);

        String desligarPC = rdbPC.isSelected() ? "Sim" : "Não";
        String nomeBackup = txtNomeBackup.getText();

        // Criando e configurando o DTO
        BancoDeDadosDTO objBancoDeDadosDTO = new BancoDeDadosDTO();
        objBancoDeDadosDTO.setDiretorioOrigem(arquivoDiretorio);
        objBancoDeDadosDTO.setDiretorioDestino(diretorioDestino);
        objBancoDeDadosDTO.setData(dataFormatada);
        objBancoDeDadosDTO.setDesligarPC(desligarPC);
        objBancoDeDadosDTO.setNomeBackup(nomeBackup);
        objBancoDeDadosDTO.setHora(horaFormatada);

        // Salvando os dados no banco de dados
        BancoDeDadosDAO objBancoDeDadosDAO = new BancoDeDadosDAO();
        objBancoDeDadosDAO.cadastrar(objBancoDeDadosDTO);

        limparCampos();

        habilitarCampos(false, false, false, false, false, false);
        configurarBotoes(false, false, true, false, false, true, false, false);
        popularTabelaAgendamentoBackup();
    }

    /**
    * Preenche a tabela de agendamento de backup na interface com os dados obtidos do banco de dados.
    * <p>
    * Este método realiza as seguintes ações:
    * 1. Cria uma instância do DAO (objeto de acesso a dados) para interagir com o banco de dados.
    * 2. Obtém o modelo da tabela existente na interface e limpa todas as suas linhas.
    * 3. Chama o método `listar` do DAO para obter uma lista de agendamentos de backup armazenados no banco de dados.
    * 4. Preenche a tabela na interface com os dados obtidos da lista, adicionando uma nova linha para cada agendamento.
    *    Os campos exibidos na tabela incluem: ID, Nome do Backup, Diretório de Origem, Diretório de Destino,
    *    Data, Hora e opção de Desligar o PC.
    * 5. Trata exceções e exibe uma mensagem de erro em caso de falha no processo.
    * </p>
    */
    public final void popularTabelaAgendamentoBackup() {
        try {

            // Cria um objeto da classe CentroDeCustoDAO para realizar operações no banco de dados
            BancoDeDadosDAO objBancoDeDadosDAO = new BancoDeDadosDAO();

            // Pega o modelo da tabela jtTabela e limpa suas linhas
            DefaultTableModel model = (DefaultTableModel) jtTabela.getModel();
            model.setNumRows(0);

            // Chama o método PesquisarCentroDeCusto para obter a lista de centros de custo
            ArrayList<BancoDeDadosDTO> lista = objBancoDeDadosDAO.listar();

            // Preenche a tabela com a lista de centros de custo
            for (int num = 0; num < lista.size(); num++) {

                // Adiciona uma nova linha na tabela para cada item da lista
                model.addRow(new Object[]{
                    lista.get(num).getId(),
                    lista.get(num).getNomeBackup(),//Trabalhando
                    lista.get(num).getDiretorioOrigem(),
                    lista.get(num).getDiretorioDestino(),
                    lista.get(num).getData(),
                    lista.get(num).getHora(),
                    lista.get(num).getDesligarPC()
                });
            }
        } catch (Exception error) {

            // Exibe uma mensagem de erro caso algo dê errado durante o processo
            JOptionPane.showMessageDialog(null, "Listar Valores View - " + error, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
    * Formata uma data no formato "dd-MM-yyyy" e a retorna como uma string.
    *
    * @param data A data a ser formatada.
    * @return A data formatada como uma string no formato "dd-MM-yyyy" ou uma string vazia se a data for nula.
    */
    private String formatarData(Date data) {
        if (data == null) {
            return "";
        }
        SimpleDateFormat formatadorData = new SimpleDateFormat("dd-MM-yyyy");
        return formatadorData.format(data);
    }

    /**
    * Formata uma hora no formato "HH:mm" e a retorna como uma string.
    *
    * @param hora A hora a ser formatada.
    * @return A hora formatada como uma string no formato "HH:mm" ou uma string vazia se a hora for nula.
    */
    private String formatarHora(Date hora) {
        if (hora == null) {
            return "";
        }
        SimpleDateFormat formatadorHora = new SimpleDateFormat("HH:mm");
        return formatadorHora.format(hora);
    }

    /**
    * Limpa os campos de entrada de dados da interface, restaurando-os para seus valores padrão ou vazios.
    */
    private void limparCampos() {

        txtID.setText("");
        txtArquivoDiretorio.setText("");
        txtDiretorio.setText("");
        jdData.setDate(null);
        txtNomeBackup.setText("");
        rdbPC.setSelected(false);
        //jsHora.setValue(new Date());
    }

    /**
    * Verifica se os campos de entrada de dados obrigatórios estão preenchidos.
    *
    * @return true se algum campo obrigatório estiver vazio, caso contrário, false.
    */
    private boolean verificarCampos() {

        if (txtArquivoDiretorio.getText().isEmpty() || txtDiretorio.getText().isEmpty()
                || jdData.getDate() == null || txtNomeBackup.getText().isEmpty()) {

            JOptionPane.showMessageDialog(null, "Favor preencher todos os dados!",
                    "Informação", JOptionPane.INFORMATION_MESSAGE);

            return true;
        }

        return false;

    }

    /**
    * Permite editar um agendamento de backup selecionado na tabela.
    * 
    * Se uma linha da tabela estiver selecionada, este método preenche os campos de edição
    * com os valores do agendamento selecionado, permitindo a edição desses valores.
    * 
    * @throws ParseException Se ocorrer um erro na conversão de datas/horas.
    */
    private void editarAgendamentoBackup() {

        try {

            // Armazena o índice da linha que foi selecionada na tabela
            int setar = jtTabela.getSelectedRow();

            // Verifica se alguma linha foi selecionada (índice diferente de -1)
            if (setar != -1) {

                habilitarCampos(true, true, true, true, true, true);
                configurarBotoes(true, true, false, true, false, false, true, true);

                // Pega os valores da linha selecionada e preenche os campos de texto correspondentes
                txtID.setText(jtTabela.getModel().getValueAt(setar, 0).toString());
                txtNomeBackup.setText(jtTabela.getModel().getValueAt(setar, 1).toString());
                txtArquivoDiretorio.setText(jtTabela.getModel().getValueAt(setar, 2).toString());
                txtDiretorio.setText(jtTabela.getModel().getValueAt(setar, 3).toString());

                SimpleDateFormat formatador = new SimpleDateFormat("dd-MM-yyyy");
                Date data = formatador.parse(jtTabela.getModel().getValueAt(setar, 4).toString());
                jdData.setDate(data);

                //Obtem a string da tabela
                String valorHoraTabela = jtTabela.getModel().getValueAt(setar, 5).toString();
                //Cria um formatador com o mesmo formato usado no JSpinner
                SimpleDateFormat formatadorHora = new SimpleDateFormat("HH:mm");
                //Converte a string para um objeto Date
                Date dataHora = formatadorHora.parse(valorHoraTabela);
                //Configura o valor do JSpinner
                jsHora.setValue(dataHora);

                String valorRadioButton = jtTabela.getModel().getValueAt(setar, 6).toString();
                rdbPC.setSelected(valorRadioButton.equals("Sim"));

            } else {

                // Caso nenhuma linha tenha sido selecionada, exibe uma mensagem de informação
                JOptionPane.showMessageDialog(null, "Favor Selecionar um agendamento de backup!", "Informação", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {

            // Caso ocorra algum erro durante o processo, captura a exceção e exibe uma mensagem de erro
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao editar os dados do usuário: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }

    }

    /**
    * Atualiza um agendamento de backup com os valores dos campos de edição.
    * 
    * Este método realiza a atualização de um agendamento de backup com base nos valores
    * preenchidos nos campos de edição. Ele verifica se os campos estão preenchidos corretamente
    * e, se estiverem, atualiza o agendamento no banco de dados.
    * 
    * @throws NumberFormatException Se ocorrer um erro na conversão de texto para número.
    * @throws ParseException Se ocorrer um erro na conversão de datas/horas.
    */
    private void atualizarAgendamentoBuckup() {

        try {

            if (verificarCampos()) {

                return;
            }

            //Atribuição dos valores as váriaveis
            int ID = Integer.parseInt(txtID.getText());
            String arquivoDiretorio = txtArquivoDiretorio.getText();
            String diretorioDestino = txtDiretorio.getText();

            Date dataSelecionada = jdData.getDate();
            String dataFormatada = formatarData(dataSelecionada);

            JSpinner.DateEditor editor = new JSpinner.DateEditor(jsHora, "HH:mm");
            jsHora.setEditor(editor);
            Date dataHora = (Date) jsHora.getValue();
            String horaFormatada = formatarHora(dataHora);

            String desligarPC = rdbPC.isSelected() ? "Sim" : "Não";
            String nomeBackup = txtNomeBackup.getText();

            //DTO
            BancoDeDadosDTO objBancoDeDadosDTO = new BancoDeDadosDTO();

            objBancoDeDadosDTO.setId(ID);
            objBancoDeDadosDTO.setDiretorioOrigem(arquivoDiretorio);
            objBancoDeDadosDTO.setDiretorioDestino(diretorioDestino);
            objBancoDeDadosDTO.setData(dataFormatada);
            objBancoDeDadosDTO.setNomeBackup(nomeBackup);
            objBancoDeDadosDTO.setDesligarPC(desligarPC);
            objBancoDeDadosDTO.setHora(horaFormatada);

            //DAO
            BancoDeDadosDAO objBancoDeDadosDAO = new BancoDeDadosDAO();

            objBancoDeDadosDAO.editar(objBancoDeDadosDTO);

            configurarBotoes(false, false, true, false, false, true, false, false);
            limparCampos();
            habilitarCampos(false, false, false, false, false, false);
            popularTabelaAgendamentoBackup();

        } catch (Exception e) {

            // Captura e exibe qualquer exceção que possa ocorrer
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao atualizar o agendamento d buckup: "
                    + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);

        }
    }

    /**
    * Exclui um agendamento de backup com base no ID fornecido.
    * 
    * Este método exclui um agendamento de backup com base no ID obtido a partir do campo de texto `txtID`.
    * Após a exclusão, os campos são limpos e a tabela de agendamentos é atualizada.
    * 
    * @throws NumberFormatException Se ocorrer um erro na conversão de texto para número.
    */
    private void excluirAgendamentoBackup() {

        try {

            int ID = Integer.parseInt(txtID.getText());

            BancoDeDadosDTO objBancoDeDadosDTO = new BancoDeDadosDTO();

            objBancoDeDadosDTO.setId(ID);

            BancoDeDadosDAO objBancoDeDadosDao = new BancoDeDadosDAO();

            objBancoDeDadosDao.excluir(objBancoDeDadosDTO);

            configurarBotoes(false, false, true, false, false, true, false, false);

            habilitarCampos(false, false, false, false, false, false);

            popularTabelaAgendamentoBackup();
            limparCampos();

        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Erro - " + e, "Informação", JOptionPane.INFORMATION_MESSAGE);

        }

    }

    /**
    * Formata a exibição do componente JSpinner para exibir horas no formato "HH:mm".
    * 
    * Este método configura o formato de exibição do componente JSpinner `jsHora` para exibir horas no formato "HH:mm".
    * Isso torna a entrada e exibição de horas mais amigável para o usuário.
    */
    private void formatarJSpinner() {
        JSpinner.DateEditor editor = new JSpinner.DateEditor(jsHora, "HH:mm");
        jsHora.setEditor(editor);
    }

// Criar uma instância da classe BancoDeDadosDAO
    BancoDeDadosDAO bancoDeDadosDAO = new BancoDeDadosDAO();

// Tempo em milissegundos (45 segundos)
    int delay = 50000;

    /**
    * Um ActionListener que executa ações em resposta a eventos ActionEvent.
    * 
    * Este ActionListener, chamado de `taskPerformer`, é configurado para ser executado em resposta a eventos ActionEvent.
    * Quando acionado, ele verifica se a data e hora atual atendem a determinados critérios com base no objeto `bancoDeDadosDAO`.
    * Se os critérios forem atendidos, ele inicia uma nova Thread para realizar as seguintes ações:
    * 1. Chama o método `backup()` para realizar uma operação de backup.
    * 2. Verifica se o `bancoDeDadosDAO` indica que o PC deve ser desligado e, se sim, chama o método `desligarPC()`.
    * 
    * Esse ActionListener é usado para agendar a execução das ações com base em eventos e condições específicas.
    */
    ActionListener taskPerformer = new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            if (bancoDeDadosDAO.verificarDataHoraAtual()) {
                new Thread(() -> {
                    backup();
                    if (bancoDeDadosDAO.verificarDesligarPC()) {
                        desligarPC();
                    }
                }).start();
            }
        }
    };

    /**
     * Realiza o backup dos arquivos ou diretórios especificados.
     * <p>
     * Este método obtém os caminhos de origem e destino do banco de dados e, em
     * seguida, chama o método {@code compactarParaZip} para compactar o arquivo
     * ou diretório de origem no arquivo ZIP de destino. O nome do arquivo ZIP é
     * formado a partir do nome do backup e do destino.
     * </p>
     *
     * <p>
     * <b>Nota:</b> Este método assume que os caminhos de origem e destino, bem
     * como o nome do backup, estão corretamente definidos no banco de dados e
     * são acessíveis.</p>
     *
     * <p>
     * Em caso de falha na compactação, as exceções são capturadas e registradas
     * no console.</p>
     *
     */
    public void backup() {
        BancoDeDadosDAO dao = new BancoDeDadosDAO();
        BancoDeDadosDTO dto = dao.verificarDataHoraAtualArquivos();
        SimpleDateFormat sdf = new SimpleDateFormat("-dd-MM-yyyy-HH_mm_ss");


        try {
            String destinoZip = dto.getDiretorioDestino() + File.separator + dto.getNomeBackup() + sdf.format(new Date()) + ".zip";
            System.out.println("Origem: " + dto.getDiretorioOrigem());
            System.out.println("Destino ZIP: " + destinoZip);

            CompactadorZip.compactarParaZip(dto.getDiretorioOrigem(), destinoZip, null);
            System.out.println("Compactação concluída com sucesso!");
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Erro ao compactar: " + e.getMessage());
        }
    }

    /**
    * Desliga o computador após um período de espera.
    * 
    * Este método executa o comando de desligamento do sistema operacional para desligar o computador após um período de espera de 60 segundos.
    * O comando utilizado é "shutdown -s -t 60", que instrui o sistema operacional a desligar o computador em 60 segundos.
    * 
    */
    public void desligarPC() {
        try {
            String shutdownCommand = "shutdown -s -t 60"; // Desliga o PC após 60 segundos
            Runtime.getRuntime().exec(shutdownCommand);
            System.out.println("O PC será desligado em 60 segundos.");
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Erro ao tentar desligar o PC: " + e.getMessage());
        }
    }

}
